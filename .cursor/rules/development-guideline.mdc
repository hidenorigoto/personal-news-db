---
description: 
globs: 
alwaysApply: true
---
# Python Project Rules for Cursor Agent Coding

## プロジェクト構造とセットアップ

### 依存関係管理
- `pyproject.toml`を使用してプロジェクトメタデータと依存関係を管理する
- Poetry、uv、またはpipenvを使用した仮想環境管理を推奨
- `requirements.txt`ではなく`pyproject.toml`の`[tool.poetry.dependencies]`または`[project.dependencies]`を使用
- 開発用依存関係は`[tool.poetry.group.dev.dependencies]`または`[project.optional-dependencies]`で管理

### プロジェクト構造
```
project/
├── src/
│   └── package_name/
│       ├── __init__.py
│       ├── main.py
│       └── modules/
├── tests/
├── docs/
├── pyproject.toml
├── README.md
└── .gitignore
```

## コーディング規約

### Python バージョン
- Python 3.9以上を使用（可能であれば3.11以上を推奨）
- `pyproject.toml`で`requires-python = ">=3.9"`を指定

### 型ヒント（Type Hints）
- **必須**: すべての関数、メソッド、クラス属性に型ヒントを付ける
- `from typing import`を使用し、Python 3.9+では組み込み型（`list[str]`など）を優先
- `Optional[T]`よりも`T | None`を使用（Python 3.10+）
- 複雑な型は`TypeAlias`または`TypeVar`を使用
- `mypy`での静的型チェックを必須とする

### フォーマッティングとリンティング
- **Black**: コードフォーマッター（line-length=88）
- **Ruff**: 高速なリンター・フォーマッター（flake8、isort、pylintの代替）
- **mypy**: 静的型チェック
- **pre-commit**: コミット前の自動チェック

#### pyproject.tomlの設定例
```toml
[tool.black]
line-length = 88
target-version = ['py39']

[tool.ruff]
line-length = 88
target-version = "py39"
select = ["E", "F", "I", "N", "W", "UP", "B", "C4", "SIM", "TCH"]

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
```

## コーディング慣例

### 関数とクラス設計
- **単一責任原則**: 1つの関数は1つのことだけを行う
- **純粋関数**: 可能な限り副作用のない関数を書く
- **型安全性**: `Any`型の使用を避け、具体的な型を指定
- **dataclasses**または**Pydantic**を使用してデータ構造を定義
- **Enum**を使用して定数をグループ化

### エラーハンドリング
- 具体的な例外クラスを作成・使用する
- `except Exception:`のような広範囲なキャッチを避ける
- コンテキストマネージャー（`with`文）を適切に使用
- `logging`モジュールを使用してエラーログを記録

### 非同期プログラミング
- `async`/`await`を使用する場合は一貫して適用
- `asyncio.run()`でエントリーポイントを実行
- `aiohttp`、`httpx`などの非同期対応ライブラリを使用
- デッドロックを避けるため`asyncio.gather()`を適切に使用

## テストとドキュメント

### テスト
- **pytest**を使用したテストフレームワーク
- テストカバレッジ80%以上を目標
- `conftest.py`でフィクスチャを管理
- `pytest-cov`でカバレッジ測定
- `pytest-mock`でモッキング
- テスト関数名は`test_機能_条件_期待結果`の形式

### ドキュメント
- **docstring**: 全ての公開関数、クラス、モジュールに記述
- **Google style**または**NumPy style**のdocstringを使用
- `README.md`にプロジェクトの概要、インストール方法、使用例を記載
- **Sphinx**または**MkDocs**を使用した自動ドキュメント生成

## パフォーマンスとセキュリティ

### パフォーマンス
- **プロファイリング**: `cProfile`、`line_profiler`を使用
- **適切なデータ構造**: リスト内包表記、ジェネレータ、`collections`モジュールの活用
- **キャッシング**: `functools.lru_cache`、`functools.cache`の使用
- **並行処理**: `concurrent.futures`、`multiprocessing`の適切な使用

### セキュリティ
- **bandit**でセキュリティ脆弱性をチェック
- **secrets**モジュールを使用してパスワード・トークン生成
- 環境変数で機密情報を管理（`.env`ファイル + `python-dotenv`）
- SQLインジェクション対策（パラメータ化クエリ）

## 依存関係とライブラリ推奨

### コア開発ツール
```toml
[tool.poetry.group.dev.dependencies]
black = "^23.0.0"
ruff = "^0.1.0"
mypy = "^1.7.0"
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pre-commit = "^3.5.0"
```

### 推奨ライブラリ
- **HTTP**: `httpx`（同期・非同期対応）
- **データ検証**: `pydantic`
- **CLI**: `typer`または`click`
- **設定管理**: `pydantic-settings`
- **ログ**: `structlog`
- **日時**: `pendulum`
- **データ操作**: `pandas`、`polars`

## CI/CDとDevOps

### GitHub Actions設定例
- Python複数バージョンでのテスト実行
- `ruff`、`black`、`mypy`の自動チェック
- テストカバレッジレポート
- 自動デプロイメント（PyPI、Docker）

### Docker
- **multi-stage build**を使用
- **Python slim**イメージをベースに使用
- **poetry**または**uv**を使用した依存関係インストール
- **non-root user**での実行

## コード品質チェックリスト

### コミット前確認事項
- [ ] 型ヒントが全ての関数に付いている
- [ ] `mypy`エラーがない
- [ ] `ruff`リンターエラーがない
- [ ] テストが全て通る
- [ ] カバレッジが80%以上
- [ ] docstringが公開APIに記述されている
- [ ] セキュリティチェック（bandit）を通過

### コードレビュー観点
- 単一責任原則の遵守
- エラーハンドリングの適切性
- テストの網羅性
- 型安全性
- パフォーマンスへの配慮
- セキュリティリスクの確認

## Agent Coding 特有の注意点

### Cursor Agentとの協働
- コード生成時は必ず型ヒントを含める
- 生成されたコードは即座にリンター・フォーマッターを実行
- テストコードも同時生成を依頼
- 複雑なロジックには適切なコメントを含める
- エラーハンドリングの実装を忘れない

### 品質保証
- Agent生成コードも手動レビューを実施
- 既存コードベースとの整合性確認
- セキュリティ観点での検証
- パフォーマンステストの実施

## mypy型エラー解消のためのテスト用Mockクラス・lambdaの型ヒント付与ガイド

### 背景
pytest等のテストコードで、mypyによる「Function is missing a return type annotation」や「Unused 'type: ignore' comment」エラーが発生することがあります。  
特に、テスト内で定義するMockクラスやlambda式に型ヒントが不足している場合に多発します。

### ベストプラクティス

#### 1. Mockクラスの`__init__`やメソッドに型ヒントを必ず付与する

**例:**
```python
class MockResponse:
    def __init__(self) -> None:
        self.content = b"<html>test</html>"
        self.headers = {"Content-Type": "text/html"}
    def raise_for_status(self) -> None:
        pass
```

#### 2. lambda式の`type: ignore`は型ヒント追加後に削除する

**Before:**
```python
monkeypatch.setattr("requests.get", lambda url, timeout=10: MockResponse())  # type: ignore
```
**After:**
```python
monkeypatch.setattr("requests.get", lambda url, timeout=10: MockResponse())
```
Mockクラスやlambdaの型ヒントが正しく付与されていれば、`type: ignore`は不要です。

#### 3. mypyで「Unused 'type: ignore' comment」エラーが出た場合

- 不要になった`type: ignore`コメントは必ず削除する。
- 型ヒント追加後は`mypy`を再実行し、エラーが消えることを確認する。

#### 4. テスト関数・fixture・setup/teardownにも型ヒントを徹底

- すべての関数・メソッド・fixture・内部クラス・lambdaに型ヒントを付与すること。
- 型ヒント追加後は`mypy`と`pytest`の両方でエラーがないことを確認する。

### まとめ
- Mockクラスやlambdaにも型ヒントを必ず付与
- 不要な`type: ignore`は削除
- mypy/pytestでエラーがないことを常に確認
