---
description: 
globs: 
alwaysApply: true
---
## 確認なしで実行してよいコマンド
- poetryコマンドは確認なしで実行してよい
- pytestコマンドは確認なしで実行してよい
- ruffコマンドは確認なしで実行してよい

## テスト・開発運用方針

- テストはpytestで自動実行し、**ユーザー確認なしで常に実行してよい**。
- テストごとにDBファイルをリセットし、テーブルを再作成するfixtureを導入し、**テスト間のデータ汚染やユニーク制約違反を防止**。
- テスト失敗時はエラー内容を確認し、修正後に再度自動実行すること。
- 新たな機能やバグ修正時は、**必要に応じてユニットテストも追加・修正**する。

## テストの実行方法

### Dockerでユニットテストを実行

#### 推奨: testサービスを使う
```bash
docker compose run --rm test
```
- すべてのテストがDocker上で実行されます。
- テスト用DBやdataディレクトリも自動的に分離されます。

#### poetryサービスでpytestを使う（開発用シェル）
```bash
docker compose run --rm poetry poetry run pytest
```

## 開発・修正時のユニットテスト実行に関する指針

- プログラムの修正や新機能追加を行った際は、**必ずユニットテストを実行し、全てのテストがパスすることを確認してください**。
- テストが失敗した場合は、修正内容を見直し、**エラーや警告が出ない状態**でコミット・プルリクエストを作成してください。
- テストの実行には以下のコマンドを使用します（プロジェクトルートで実行）：
  ```bash
  pytest
  ```
- 新たな機能やバグ修正を行った場合は、**必要に応じてユニットテストも追加・修正**してください。

