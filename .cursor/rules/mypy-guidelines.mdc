---
description: 
globs: 
alwaysApply: true
---
# MyPy型エラー予防ガイドライン

## 概要

このガイドラインは、Python開発においてMyPyでの型エラーを事前に防ぐための実践的な指針を提供します。特にFastAPI、SQLAlchemy、Pytestを使用したプロジェクトでの型安全性を重視しています。

## 1. 基本的な型アノテーション原則

### 1.1. 関数の戻り値型を必ず指定

```python
# ❌ 型アノテーションなし
def get_user(user_id):
    return User.query.get(user_id)

# ✅ 適切な型アノテーション
def get_user(user_id: int) -> User | None:
    return User.query.get(user_id)

# ✅ 非同期関数の場合
async def get_user_async(user_id: int) -> User | None:
    return await User.query.get(user_id)
```

### 1.2. ジェネレーター関数の型指定

```python
from collections.abc import Generator, AsyncGenerator
from sqlalchemy.orm import Session

# ✅ 同期ジェネレーター
def get_db() -> Generator[Session, None, None]:
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# ✅ 非同期ジェネレーター（FastAPIライフサイクル）
@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:
    # 初期化処理
    yield
    # クリーンアップ処理
```

### 1.3. collections.abcの使用（Python 3.12+）

```python
# ❌ 古いインポート
from typing import List, Dict, Set, Generator

# ✅ 新しいインポート（Python 3.12+）
from collections.abc import Generator, AsyncGenerator

# ✅ 組み込み型の使用
def process_items(items: list[str]) -> dict[str, int]:
    return {item: len(item) for item in items}
```

## 2. FastAPI特有の型安全性

### 2.1. 依存関数の型アノテーション

```python
from fastapi import Depends
from sqlalchemy.orm import Session

# ✅ 依存関数の適切な型指定
def get_current_user(
    db: Session = Depends(get_db),
    token: str = Depends(oauth2_scheme)
) -> User:
    # 実装
    return user

# ✅ エンドポイント関数
@app.get("/users/{user_id}", response_model=UserResponse)
async def get_user(
    user_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
) -> UserResponse:
    return UserResponse.from_orm(user)
```

### 2.2. Pydanticモデルの型安全性

```python
from pydantic import BaseModel, Field
from typing import Optional
from datetime import datetime

class UserBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=100)
    email: str = Field(..., regex=r'^[^@]+@[^@]+\.[^@]+$')
    is_active: bool = True

class UserCreate(UserBase):
    password: str = Field(..., min_length=8)

class UserResponse(UserBase):
    id: int
    created_at: datetime
    
    class Config:
        from_attributes = True  # SQLAlchemy 2.0対応
```

### 2.3. レスポンスモデルの型指定

```python
from fastapi import HTTPException, status

# ✅ 明示的な戻り値型
@app.post("/users/", response_model=UserResponse, status_code=status.HTTP_201_CREATED)
async def create_user(
    user_data: UserCreate,
    db: Session = Depends(get_db)
) -> UserResponse:
    # バリデーション
    if existing_user := get_user_by_email(db, user_data.email):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already registered"
        )
    
    user = create_user_in_db(db, user_data)
    return UserResponse.from_orm(user)
```

## 3. SQLAlchemy 2.0での型安全性

### 3.1. モデル定義での型アノテーション

```python
from sqlalchemy import String, Integer, Boolean, DateTime
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column
from datetime import datetime

class Base(DeclarativeBase):
    pass

class User(Base):
    __tablename__ = "users"
    
    # ✅ Mapped型アノテーションの使用
    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    name: Mapped[str] = mapped_column(String(100), nullable=False)
    email: Mapped[str] = mapped_column(String(255), unique=True, nullable=False)
    is_active: Mapped[bool] = mapped_column(Boolean, default=True)
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    
    # オプショナルフィールド
    last_login: Mapped[datetime | None] = mapped_column(DateTime, nullable=True)
```

### 3.2. クエリ操作の型安全性

```python
from sqlalchemy import select
from sqlalchemy.orm import Session

def get_user_by_id(db: Session, user_id: int) -> User | None:
    """ユーザーをIDで取得"""
    stmt = select(User).where(User.id == user_id)
    return db.scalar(stmt)

def get_users_by_status(db: Session, is_active: bool) -> list[User]:
    """ステータスでユーザーを取得"""
    stmt = select(User).where(User.is_active == is_active)
    return list(db.scalars(stmt))

def get_user_count(db: Session) -> int:
    """ユーザー数を取得"""
    stmt = select(func.count(User.id))
    result = db.scalar(stmt)
    return result or 0  # Noneの場合は0を返す
```

## 4. テストでの型安全性

### 4.1. Pytestフィクスチャの型アノテーション

```python
import pytest
from collections.abc import Generator
from fastapi.testclient import TestClient
from sqlalchemy.orm import Session

@pytest.fixture(scope="session", autouse=True)
def setup_test_database() -> Generator[None, None, None]:
    """テストデータベースのセットアップ"""
    Base.metadata.create_all(bind=engine)
    yield
    Base.metadata.drop_all(bind=engine)

@pytest.fixture
def db_session() -> Generator[Session, None, None]:
    """テスト用データベースセッション"""
    connection = engine.connect()
    transaction = connection.begin()
    session = TestingSessionLocal(bind=connection)
    
    yield session
    
    session.close()
    transaction.rollback()
    connection.close()

@pytest.fixture
def client(db_session: Session) -> Generator[TestClient, None, None]:
    """テスト用FastAPIクライアント"""
    def override_get_db() -> Generator[Session, None, None]:
        yield db_session
    
    app.dependency_overrides[get_db] = override_get_db
    
    with TestClient(app) as test_client:
        yield test_client
    
    app.dependency_overrides.clear()
```

### 4.2. テスト関数の型アノテーション

```python
def test_create_user(client: TestClient, db_session: Session) -> None:
    """ユーザー作成テスト"""
    user_data = {
        "name": "Test User",
        "email": "test@example.com",
        "password": "testpassword123"
    }
    
    response = client.post("/users/", json=user_data)
    
    assert response.status_code == 201
    data = response.json()
    assert data["name"] == user_data["name"]
    assert data["email"] == user_data["email"]
    assert "id" in data

def test_get_user_not_found(client: TestClient) -> None:
    """存在しないユーザーの取得テスト"""
    response = client.get("/users/999")
    assert response.status_code == 404
```

## 5. 設定とエラーハンドリングの型安全性

### 5.1. Pydantic Settingsの型安全性

```python
from pydantic import Field, validator
from pydantic_settings import BaseSettings, SettingsConfigDict
from functools import lru_cache

class Settings(BaseSettings):
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        case_sensitive=True
    )
    
    # 必須設定
    secret_key: str = Field(..., min_length=32)
    database_url: str = Field(..., alias="DATABASE_URL")
    
    # オプション設定
    debug: bool = Field(default=False)
    log_level: str = Field(default="INFO")
    
    # バリデーション
    @validator('log_level')
    def validate_log_level(cls, v: str) -> str:
        allowed_levels = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']
        if v.upper() not in allowed_levels:
            raise ValueError(f'log_level must be one of {allowed_levels}')
        return v.upper()

@lru_cache()
def get_settings() -> Settings:
    return Settings()
```

### 5.2. カスタム例外の型安全性

```python
from fastapi import HTTPException, status
from typing import Any

class AppException(Exception):
    """アプリケーション基底例外"""
    def __init__(self, message: str, details: dict[str, Any] | None = None) -> None:
        self.message = message
        self.details = details or {}
        super().__init__(self.message)

class UserNotFoundError(AppException):
    """ユーザーが見つからない例外"""
    def __init__(self, user_id: int) -> None:
        super().__init__(
            message=f"User with id {user_id} not found",
            details={"user_id": user_id}
        )

def handle_user_not_found(exc: UserNotFoundError) -> HTTPException:
    """ユーザー未発見例外のハンドラー"""
    return HTTPException(
        status_code=status.HTTP_404_NOT_FOUND,
        detail=exc.message
    )
```

## 6. 非同期処理の型安全性

### 6.1. 非同期関数の型アノテーション

```python
import asyncio
from typing import Awaitable

async def fetch_user_data(user_id: int) -> dict[str, Any]:
    """外部APIからユーザーデータを取得"""
    # 実装
    return {"id": user_id, "name": "User"}

async def process_multiple_users(user_ids: list[int]) -> list[dict[str, Any]]:
    """複数ユーザーの並行処理"""
    tasks: list[Awaitable[dict[str, Any]]] = [
        fetch_user_data(user_id) for user_id in user_ids
    ]
    return await asyncio.gather(*tasks)
```

### 6.2. コンテキストマネージャーの型安全性

```python
from contextlib import asynccontextmanager
from collections.abc import AsyncGenerator

@asynccontextmanager
async def database_transaction(db: Session) -> AsyncGenerator[Session, None]:
    """データベーストランザクションコンテキスト"""
    transaction = db.begin()
    try:
        yield db
        await transaction.commit()
    except Exception:
        await transaction.rollback()
        raise
    finally:
        await transaction.close()
```

## 7. MyPy設定のベストプラクティス

### 7.1. pyproject.tomlでの厳密な設定

```toml
[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true

# 除外設定
exclude = [
    "alembic/",
    "alembic/versions/",
]

# モジュール別設定
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "sqlalchemy.*",
    "alembic.*",
    "pytest.*",
]
ignore_missing_imports = true
```

### 7.2. 段階的な型チェック導入

```python
# 既存コードの段階的改善
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from sqlalchemy.orm import Session
    from .models import User

def legacy_function(db, user_id):  # type: ignore[no-untyped-def]
    """既存の関数（段階的に型を追加）"""
    # TODO: 型アノテーションを追加
    return db.query(User).get(user_id)
```

## 8. 実践的なチェックリスト

### 8.1. コード作成時のチェックポイント

- [ ] 全ての関数に戻り値型アノテーションを追加
- [ ] ジェネレーター関数にはGenerator/AsyncGenerator型を使用
- [ ] collections.abcからのインポートを使用（Python 3.12+）
- [ ] Pydanticモデルでfrom_attributes = Trueを設定
- [ ] SQLAlchemyモデルでMapped型アノテーションを使用
- [ ] 非同期関数の戻り値型を明示
- [ ] カスタム例外クラスに適切な型アノテーション

### 8.2. コードレビュー時のチェックポイント

- [ ] `Any`型の使用を最小限に抑制
- [ ] `type: ignore`コメントに理由を記載
- [ ] オプショナル型（`| None`）の適切な使用
- [ ] 型ガードの実装（必要に応じて）
- [ ] 型変数（TypeVar）の適切な使用

### 8.3. テスト時のチェックポイント

- [ ] テストフィクスチャの型アノテーション
- [ ] モックオブジェクトの型安全性
- [ ] テストデータの型一貫性
- [ ] 例外テストでの型安全性

## 9. よくある型エラーとその対策

### 9.1. None型関連のエラー

```python
# ❌ エラーが発生しやすいパターン
def get_user_name(user_id: int) -> str:
    user = get_user_by_id(user_id)  # User | None
    return user.name  # エラー: 'None' has no attribute 'name'

# ✅ 適切な対処
def get_user_name(user_id: int) -> str | None:
    user = get_user_by_id(user_id)
    return user.name if user else None

# ✅ デフォルト値を使用
def get_user_name_with_default(user_id: int) -> str:
    user = get_user_by_id(user_id)
    return user.name if user else "Unknown"
```

### 9.2. 辞書型のキーアクセス

```python
# ❌ エラーが発生しやすいパターン
def process_data(data: dict[str, Any]) -> str:
    return data["name"]  # KeyErrorの可能性

# ✅ 適切な対処
def process_data(data: dict[str, Any]) -> str | None:
    return data.get("name")

# ✅ デフォルト値付き
def process_data_with_default(data: dict[str, Any]) -> str:
    return data.get("name", "Unknown")
```

### 9.3. リスト・辞書の空チェック

```python
# ✅ 型安全な空チェック
def get_first_item(items: list[str]) -> str | None:
    return items[0] if items else None

def get_dict_value(data: dict[str, int], key: str) -> int | None:
    return data.get(key)
```

## 10. まとめ

このガイドラインに従うことで、MyPyでの型エラーを大幅に削減できます：

1. **事前の型設計**: 関数設計時に戻り値型を明確にする
2. **段階的導入**: 既存コードに段階的に型アノテーションを追加
3. **厳密な設定**: MyPy設定で厳密な型チェックを有効化
4. **継続的チェック**: CI/CDパイプラインでの自動型チェック
5. **チーム共有**: 型安全性のベストプラクティスをチーム内で共有

型安全性は一度に完璧にする必要はありません。段階的に改善していくことで、保守性の高いコードベースを構築できます。
